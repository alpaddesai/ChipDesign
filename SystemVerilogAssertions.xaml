<Window x:Class="SystemVerilogDV.SystemVerilogAssertions"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SystemVerilogDV"
        mc:Ignorable="d"
        Title="SystemVerilogAssertions" Height="316" Width="800" MaxWidth="800" MaxHeight="316">
    <Window.Background>
        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="Black" Offset="0"/>
            <GradientStop Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}" Offset="1"/>
        </LinearGradientBrush>
    </Window.Background>
    <Grid>
        <RichTextBox HorizontalAlignment="Left" Height="263" Margin="11,6,0,0" VerticalAlignment="Top" Width="776">
            <FlowDocument>
                <Paragraph FontSize="12" FontFamily="Segoe UI" Margin="0" TextAlignment="Left">
                    <Span Foreground="Black" FontWeight="Bold">
                        <Run Text="System Verilog Assertions"/>
                    </Span>
                    <Span Foreground="Black">
                        <Run Text=" : Industry standard over the last decade for specifying RTL assertions. The most common way to do this is through properties specified in assertions, there are numerous specification methods in the industry and academia such as Property Specification Language (PSL) and Open Verification Library (OVL). Basic assertion concepts:  An    "/>
                    </Span>
                    <Span Foreground="Black" FontWeight="Bold">
                        <Run Text="Assertion "/>
                    </Span>
                    <Span Foreground="Black">
                        <Run Text="   is a statement about the design that you expect to be always true. An  "/>
                    </Span>
                    <Span Foreground="Black" FontWeight="Bold">
                        <Run Text="Assumption: "/>
                    </Span>
                    <Span Foreground="Black">
                        <Run Text="     specifies the external conditions that are guaranteed to be true.      "/>
                    </Span>
                    <Span Foreground="Black" FontWeight="Bold">
                        <Run Text="Cover point: "/>
                    </Span>
                    <Span Foreground="Black">
                        <Run Text=" Testing an interesting condition, the script saves information to a database when a cover point is accessed. The user can examine the total coverage after running all the simulation tests in their test suite.    "/>
                    </Span>
                    <Span Foreground="Black" FontWeight="Bold">
                        <Run Text="Immediate assertion: "/>
                    </Span>
                    <Span Foreground="Black">
                        <Run Text="     Accessed during code evaluation, they have no concept of clocks or reset and hence are incapable of verifying behavior that spans over time. Immediate assertions placed in a clocked procedural statement is a concurrent assertion.  Also known as non-temporal domain assertions.  "/>
                    </Span>
                    <Span Foreground="Black" FontWeight="Bold">
                        <Run Text="Concurrent assertion: "/>
                    </Span>
                    <Span Foreground="Black">
                        <Run Text="   Always utilize concurrent assertions instead of immediate assertions, using assertions that are relative to known clocks is a feature that is directly supported by concurrent assertions. Immediate assertions might report on incorrect temporary values if not stated relative to a clock Concurrent assertions are also called temporal domain assertions and are edge sensitive   "/>
                    </Span>
                    <Span Foreground="Black" FontWeight="Bold">
                        <Run Text=". Benefits include"/>
                    </Span>
                    <Run Text=" :  SVA language supports multi-clock domain crossing (CDC) logic,  Assertions are readable, Reusable for future designs, Assertions are always On, acceleration / emulation with assertions, global severity levels, formal verification depends on assertions, one language , multiple  usage.   "/>
                    <Span Foreground="Black" FontWeight="Bold">
                        <Run Text="Types of assertions include:"/>
                    </Span>
                    <Span Foreground="Black">
                        <Run Text="    RTL assertions (design intent), Module interface assertions (design interface intent), Chip functionality Assertions (chip/ SoC functional intent), Chip interface assertions (chip interface intent) , performance implication assertions (performance intent)."/>
                    </Span>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>
    </Grid>
</Window>
