<Window x:Name="SystemVerilog" x:Class="SystemVerilogDV.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SystemVerilogDV"
        mc:Ignorable="d"
        Title="System Verilog DV" Height="666.5" Width="1259.5" MaxWidth="1260" MaxHeight="666">
    <Window.Background>
        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="Black" Offset="0"/>
            <GradientStop Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}" Offset="1"/>
        </LinearGradientBrush>
    </Window.Background>
    <Grid Margin="0,-4,17,10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="439*"/>
            <ColumnDefinition Width="32*"/>
            <ColumnDefinition Width="725*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="33*"/>
            <RowDefinition Height="670*"/>
            <RowDefinition Height="88*"/>
            <RowDefinition Height="0*"/>
        </Grid.RowDefinitions>
        <RichTextBox HorizontalAlignment="Left" Height="24" Margin="52,5,0,0" VerticalAlignment="Top" Width="1099" Grid.ColumnSpan="3" Grid.RowSpan="2">
            <FlowDocument>
                <Paragraph>
                    <Run FontWeight="Bold" Text="FORMAL VERIFICATION: "/>
                    <Run Text=" "/>
                    <Run Text="FV is the use of tools that mathematically analyze the space of possible behaviors of the design rather than computing results (writing individual test benches) for  specific values"/>
                    <Run Text=" "/>
                </Paragraph>
                <Paragraph>
                    <Run FontWeight="Bold" Text=""/>
                </Paragraph>
                <Paragraph>
                    <Run FontWeight="Bold"/>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>
        <RichTextBox HorizontalAlignment="Left" Height="88" Margin="6,324,0,0" VerticalAlignment="Top" Width="647" TextChanged="RichTextBox_TextChanged" Grid.Row="1" Grid.ColumnSpan="3">
            <FlowDocument>
                <Paragraph>
                    <Run FontWeight="Bold" Text="Formal Verification: "/>
                    <Run Text="Techniques for preparing designs for verification include the following:  * "/>
                    <Run FontWeight="Bold" FontStyle="Italic" Text="State Matching"/>
                    <Run Text=", simplify the verification problem by understanding the schematics of the RTL design * "/>
                    <Run FontWeight="Bold" FontStyle="Italic" Text="Bounded proofs "/>
                    <Run Text=": Guaranteeing accurate coverage up to a specific limit * Proof Decomposition: Improve our FV capacity * "/>
                    <Run FontWeight="Bold" FontStyle="Italic" Text="Targeted Verification"/>
                    <Run Text=", * "/>
                    <Run FontStyle="Italic" Text="Size reductions"/>
                    <Run Text=" : analyze the design to catch the vast majority of bugs * "/>
                    <Run FontStyle="Italic" Text="Case  Splitting"/>
                    <Run Text=": Targeted verification on a case by case basis * "/>
                    <Run FontWeight="Bold" FontStyle="Italic" Text="Design abstractions"/>
                    <Run FontStyle="Italic" Text=": "/>
                    <Run Text="Validate the output     "/>
                    <Run FontWeight="Bold" FontStyle="Italic" Text="Data abstractions"/>
                    <Run FontStyle="Italic" Text=":"/>
                    <Run Text=" Analyze possible subsets of data.  "/>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>
        <Image HorizontalAlignment="Left" Height="324" Margin="6,8,0,0" Grid.Row="1" VerticalAlignment="Top" Width="646" Source="Image2.png" Grid.ColumnSpan="3"/>
        <RichTextBox HorizontalAlignment="Left" Height="154" Margin="8,417,0,0" Grid.Row="1" VerticalAlignment="Top" Width="645" TextChanged="RichTextBox_TextChanged_2" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Grid.ColumnSpan="3" Grid.RowSpan="2">
            <FlowDocument>
                <Paragraph>
                    <Run Text="SystemC is a C++ class library built on top of ANSC C++ which allows a designer to create cycle accurate models of system level designs including SW algorithms, HW architectures and their interfaces hence converting standard C/C++ to a system descriptor language (SDL). The C++ program exhibits the same behavior as the system enabling its simulation, validation, and optimization.  "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="References: Formal Verification: an essential toolkit for modern VLSI design Erik Seligman, Tom Schubert, Kiran Kumar,2015 ; References: SVA: power of assertions in SystemVerilog, Eduard Cerny, 2014; References SystemsC from the Ground Up, David C. Black and Jack Donovan, 2004; Reference: SystemVerilog assertions and function coverage: guide to language, methodology and applications, Ashok Mehta, 2016"/>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>
        <Button x:Name="HW_Emulation" Content="Hardware emulation" HorizontalAlignment="Left" Margin="266,509,0,0" Grid.Row="1" VerticalAlignment="Top" Width="141" RenderTransformOrigin="-0.173,-0.25" Height="37" Grid.Column="2" Click="HW_Emulation_Click" Grid.RowSpan="2"/>
        <Button x:Name="System_Level_Modeling" Content="System Level Modeling" HorizontalAlignment="Left" Margin="417,511,0,0" Grid.Row="1" VerticalAlignment="Top" Width="139" Height="35" Grid.Column="2" Click="System_Level_Modeling_Click" Grid.RowSpan="2"/>
        <Button x:Name="SystemVerilog_Assertions" Content="System Verilog Assertions" HorizontalAlignment="Left" Margin="563,508,0,0" Grid.Row="1" VerticalAlignment="Top" Width="162" Height="37" Grid.Column="2" Click="SystemVerilog_Assertions_Click" Grid.RowSpan="2"/>
        <RichTextBox Grid.Column="2" HorizontalAlignment="Left" Height="484" Margin="181,6,-7,0" VerticalAlignment="Top" Width="575" Grid.Row="1" RenderTransformOrigin="0.5,0.5" TextChanged="RichTextBox_TextChanged_4">
            <RichTextBox.RenderTransform>
                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform AngleX="-0.116"/>
                    <RotateTransform/>
                    <TranslateTransform X="-0.498"/>
                </TransformGroup>
            </RichTextBox.RenderTransform>
            <FlowDocument>
                <Paragraph>
                    <Run FontWeight="Bold" Text="Formal Property Verification"/>
                    <Run Text=": Is the process of verifying properties usually expressed as assertions or cover points on an RTL model. However it is fundamentally different from design verification simulations. The inputs to the process includes : * An RTL model, * A set of properties to prove: assertions &amp; cover points * A set of constraints: assumptions, plus clock and reset definitions.  Unlike simulations it does not check a specific signal value, all possible achievable values under the current constraints are checked at once:  Hence the output of the process is a proven property list (proven assertions and unreachable cover points - i.e beyond the scope of the current verification environment) , bounded proof ( for each disproved assertion or reachable cover point a waveform showing a case of failure / reach ability and a list of bounded or inconclusive proofs: asserts and covers that were not definitely proven or disproven. For all modern FPV tools, the RTL models used in FPV must be synthesizable however popular simulation based validation methodologies like Open Verification Methodology (OVM) and Universal Verification Methodology (UVM) can be separated from the synthesizable models by using the bind construct in System Verilog.  Hence with proper planning one can keep the synthesizable code separate from non-synthesizable code to enable FPV.  Steps to bringing up a FPV include:  "/>
                    <Run Text=" "/>
                    <Run FontWeight="Bold" Text="Compiling RTL "/>
                    <Run Text=":The FPV tool runs on compiled and synthesizable RTL "/>
                    <Run FontWeight="Bold" Text="Creating Cover Points :"/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text="Translate each waveform diagram into an SVA sequence e.g each state of your state machine is possible.  "/>
                    <Run Text=" "/>
                    <Run FontWeight="Bold" Text="Creating Assumptions/Constraints"/>
                    <Run Text=": Start with a  small set of assumptions and discover more assumptions during the debug process.  "/>
                    <Run Text=" "/>
                    <Run FontWeight="Bold" Text="Creating Assertions"/>
                    <Run Text=": Set up cover points first. m"/>
                    <Run FontWeight="Bold" Text=" Clocks are resets: "/>
                    <Run Text=" "/>
                    <Run Text="SVA sequences and concurrent assertions always exist relative to some clock. Input can be a primary clock, since the FPV tool requires synthesizable code, the clock cannot be generated inside an RTL model"/>
                    <Run FontWeight="Bold" Text=". Running the verification:  "/>
                    <Run Text="The tool will analyze the space of all possible logic executions that start in that state.  "/>
                    <Run FontWeight="Bold" Text="Difference between a DV test and FPV tool"/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=": A simulation tool runs on specific test vectors and validates that the current values behave as expected for each assertion and assumption in the code and checks whether they hit a cover point. An FPV tool analyzes the space of possible simulations as limited by the assumptions so that all the assertions are checked and if possible uncover a cover point or a corner case"/>
                    <Run FontStyle="Italic" Text=". Hence FV provides a set of powerful techniques for analyzing and verifying today's modern VLSI and SOC designs. "/>
                    <Run Text="Work effort from the user to setup , run and debug the FV tools includes:  "/>
                    <Run FontStyle="Italic" Text="Selecting/partitioning the design/ RTL models / Properties/ Abstractions and Tool Knobs"/>
                    <Run FontWeight="Bold" Text=" Checkers:"/>
                    <Run Text=" "/>
                    <Run Text="Generalize assertions and behave as one complex assertion. "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=""/>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>

    </Grid>
</Window>
